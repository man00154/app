name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests to the main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.manish }}
          password: ${{ secrets.man@1234 }}

      - name: Build Docker image
        id: docker_build # <--- ENSURE THIS ID IS PRESENT AND CORRECT
        uses: docker/build-and-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/itsm-forecasting-app:latest
          file: ./Dockerfile

      - name: Verify image push
        run: echo "Docker image pushed: ${{ steps.docker_build.outputs.digest }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push # This job depends on the build-and-push job
    environment: production # Optional: Define an environment for deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # This step assumes you have SSH access to your server and Docker installed there.
      # Replace with your actual deployment logic (e.g., Kubernetes deployment, AWS ECS, etc.)
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }} # Your server's IP or hostname
          username: ${{ secrets.SSH_USERNAME }} # SSH username
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH private key (store as a GitHub Secret)
          script: |
            # Navigate to your application directory on the server
            cd /path/to/your/app/directory # IMPORTANT: Change this to your actual directory
            
            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/itsm-forecasting-app:latest
            
            # Stop and remove existing containers (if any)
            docker-compose down || true
            
            # Start new containers with the latest image
            docker-compose up -d --build # --build ensures it rebuilds if needed, though pull should handle it
            
            echo "Deployment complete!"
